<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="what_is_xml">
    <title>What is XML</title>
    <shortdesc>Extensible Markup Language (XML) is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable.</shortdesc>
    <conbody>
        <p>The World Wide Web Consortium's XML 1.0 Specification[2] of 1998[3] and several other related specifications[4]—all of them free open standards—define XML.[5]
            The design goals of <term>XML</term> emphasize simplicity, generality, and usability across the Internet.[6] It is a textual data format with strong support via Unicode for different human languages. Although the design of XML focuses on documents, the language is widely used for the representation of arbitrary data structures[7] such as those used in web services.
            Several schema systems exist to aid in the definition of XML-based languages, while programmers have developed many application programming interfaces (APIs) to aid the processing of XML data.
        </p>
        <image align="center"  width="500"  href="../../resources/images/XML.jpeg"></image>
            
       
        <section>
            <title>Applications</title>
            <p>The essence of why extensible markup languages are necessary is explained at Markup language (for example, see Markup language § XML) and at Standard Generalized Markup Language.
                Hundreds of document formats using <term>XML</term> syntax have been developed,[8] including RSS, Atom, SOAP, SVG, and XHTML. XML-based formats have become the default for many office-productivity tools, including Microsoft Office (Office Open XML), OpenOffice.org and LibreOffice (OpenDocument), and Apple's iWork[citation needed]. XML has also provided the base language for communication protocols such as XMPP. Applications for the Microsoft .NET Framework use XML files for configuration, and property lists are an implementation of configuration storage built on XML.[9]
                Many industry data standards, such as Health Level 7, OpenTravel Alliance, FpML, MISMO, and National Information Exchange Model are based on XML and the rich features of the XML schema specification. Many of these standards are quite complex and it is not uncommon for a specification to comprise several thousand pages.[citation needed] In publishing, Darwin Information Typing Architecture is an XML industry data standard. XML is used extensively to underpin various publishing formats.
                XML is widely used in a Services Oriented Architecture (SOA). Disparate systems communicate with each other by exchanging XML messages. The message exchange format is standardised as an XML schema (XSD). This is also referred to as the canonical schema. XML has come into common use for the interchange of data over the Internet. IETF RFC:3023, now superseded by RFC:7303, gave rules for the construction of Internet Media Types for use when sending XML. It also defines the media types application/xml and text/xml, which say only that the data is in XML, and nothing about its semantics.
                RFC 7303 also recommends that XML-based languages be given media types ending in +xml; for example image/svg+xml for SVG. Further guidelines for the use of XML in a networked context appear in RFC 3470, also known as IETF BCP 70, a document covering many aspects of designing and deploying an XML-based language.
                
            </p>
            
        </section>
       <section>
           <title>Terminology</title>
           <p>
               <dl>
                   <dlentry>
                       <dt>Character</dt>
                       <dd>An <term>XML</term> document is a string of characters. Almost every legal Unicode character may appear in an XML document.</dd>
                   </dlentry>
                   <dlentry>
                       <dt>Processor and application</dt>
                       <dd>The processor analyzes the markup and passes structured information to an application. The specification places requirements on what an XML processor must do and not do, but the application is outside its scope. The processor (as the specification calls it) is often referred to colloquially as an XML parser.</dd>
                   </dlentry>
                   <dlentry>
                       <dt>Markup and content</dt>
                       <dd>The characters making up an XML document are divided into markup and content, which may be distinguished by the application of simple syntactic rules. Generally, strings that constitute markup either begin with the character &lt; and end with a &gt;, or they begin with the character &amp; and end with a ;. Strings of characters that are not markup are content. However, in a CDATA section, the delimiters &lt;![CDATA[ and ]]&gt; are classified as markup, while the text between them is classified as content. In addition, whitespace before and after the outermost element is classified as markup.</dd>
                   </dlentry>
                   <dlentry>
                       <dt>Tag</dt>
                       <dd>A tag is a markup construct that begins with &lt; and ends with &gt;. Tags come in three flavors:
                           <ul>
                               <li>start-tag, such as &lt;section&gt;</li>
                               <li>end-tag, such as &lt;/section&gt;</li>
                               <li>empty-element tag, such as &lt;line-break /&gt;.</li>
                           </ul>
                           
                           
                       </dd>
                   </dlentry>
                   <dlentry>
                       <dt>Element</dt>
                       <dd>
                           An element is a logical document component that either begins with a start-tag and ends with a matching end-tag or consists only of an empty-element tag. The characters between the start-tag and end-tag, if any, are the element's content, and may contain markup, including other elements, which are called child elements. An example is &lt;greeting&gt;Hello, world!&lt;/greeting&gt;. Another is &lt;line-break /&gt;.
                           
                       </dd>
                   </dlentry>
                   <dlentry>
                       <dt>Attribute</dt>
                       <dd>An attribute is a markup construct consisting of a name–value pair that exists within a start-tag or empty-element tag. An example is &lt;img src="madonna.jpg" alt="Madonna" /&gt;, where the names of the attributes are "src" and "alt", and their values are "madonna.jpg" and "Madonna" respectively. Another example is &lt;step number="3"&gt;Connect A to B.&lt;/step&gt;, where the name of the attribute is "number" and its value is "3". An XML attribute can only have a single value and each attribute can appear at most once on each element. In the common situation where a list of multiple values is desired, this must be done by encoding the list into a well-formed XML attribute[i] with some format beyond what XML defines itself. Usually this is either a comma or semi-colon delimited list or, if the individual values are known not to contain spaces,[ii] a space-delimited list can be used. &lt;div class="inner greeting-box"&gt;Welcome!&lt;/div&gt;, where the attribute "class" has both the value "inner greeting-box" and also indicates the two CSS class names "inner" and "greeting-box".
                       </dd>
                   </dlentry>
               </dl>
           </p>
       </section>
        
    </conbody>
    <related-links >
        <link href="https://en.wikipedia.org/wiki/XML" format="html" scope="external"></link>
        <link href="https://www.w3schools.com/xml/xml_whatis.asp" format="html" scope="external"></link>
    </related-links>
</concept>
